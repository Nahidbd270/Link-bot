import os
import time
import asyncio
from pyrofork import Client, filters
from pyrogram.errors import UserIsBlocked, PeerIdInvalid
from flask import Flask, render_template_string, abort
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv
from threading import Thread
import aiohttp # requests ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá aiohttp ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME")
WEB_DOMAIN = os.getenv("WEB_DOMAIN") # ‡¶Ø‡ßá‡¶Æ‡¶®: https://your-domain.com
MONGO_URI = os.getenv("MONGO_URI")
LOG_CHANNEL = int(os.getenv("LOG_CHANNEL"))

# MongoDB ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
mongo = AsyncIOMotorClient(MONGO_URI)
db = mongo["filestream"]
collection = db["files"]

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
app = Flask(__name__)

# Pyrogram ‡¶¨‡¶ü ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
bot = Client("FileStreamBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# HTML5 ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü
PLAYER_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{{ title }}</title>
  <style>
    body { background-color: #0d1117; color: #c9d1d9; text-align: center; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; }
    video { width: 95%; max-width: 850px; margin-top: 30px; border-radius: 12px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4); outline: none; }
    h1 { font-size: 1.5rem; margin-top: 20px; font-weight: 600; }
    .footer { margin-top: 30px; font-size: 0.9rem; color: #8b949e; }
    a { color: #58a6ff; text-decoration: none; }
  </style>
</head>
<body>
  <video controls autoplay playsinline>
    <source src="https://api.telegram.org/file/bot{{ bot_token }}/{{ file_path }}" type="{{ mime }}">
    ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ HTML5 ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§
  </video>
  <h1>{{ title }}</h1>
  <div class="footer">Powered by <a href="https://t.me/{{ bot_username }}">{{ bot_username }}</a></div>
</body>
</html>
"""

# Flask ‡¶π‡ßã‡¶Æ‡¶™‡ßá‡¶ú ‡¶∞‡ßÅ‡¶ü
@app.route('/')
def home():
    return "<h3>‚úÖ ‡¶´‡¶æ‡¶á‡¶≤‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá!</h3>"

# ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Flask ‡¶∞‡ßÅ‡¶ü
# ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø‡¶ï‡ßá async ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø await ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá
@app.route('/watch/<file_id>')
async def stream_video(file_id):
    # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    file_doc = await collection.find_one({"file_id": file_id})
    if not file_doc:
        return abort(404, description="‡¶´‡¶æ‡¶á‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    # Telegram API ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶æ‡¶• (path) ‡¶Ü‡¶®‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá aiohttp ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡ßç‡¶≤‡¶ï ‡¶®‡¶æ ‡¶π‡ßü
    async with aiohttp.ClientSession() as session:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getFile?file_id={file_id}"
        async with session.get(url) as response:
            if response.status != 200:
                return abort(500, description="Telegram API ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§")
            
            res = await response.json()
            if not res.get("ok"):
                return abort(500, description="Telegram API error: " + res.get("description", "Unknown error"))

    file_path = res["result"]["file_path"]
    
    return render_template_string(
        PLAYER_TEMPLATE,
        title=file_doc.get("file_name", "Untitled Video"),
        file_path=file_path,
        mime=file_doc.get("mime_type", "video/mp4"),
        bot_token=BOT_TOKEN,
        bot_username=BOT_USERNAME
    )

# '/start' ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@bot.on_message(filters.private & filters.command("start"))
async def start(client, message):
    args = message.text.split(maxsplit=1)
    # ‡¶°‡ßÄ‡¶™ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ø‡¶Ç ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (e.g., t.me/bot?start=file_id)
    if len(args) == 2:
        file_id = args[1]
        file_doc = await collection.find_one({"file_id": file_id})
        if not file_doc:
            await message.reply_text("‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶¨‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡ßà‡¶ß‡•§")
            return
        try:
            # ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            await client.send_cached_media(
                chat_id=message.chat.id, 
                file_id=file_id,
                caption=file_doc.get("caption", "")
            )
        except Exception as e:
            await message.reply_text(f"‚ö†Ô∏è ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
    else:
        await message.reply_text("üëã ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì, ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¨‡¶æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡ßá‡¶¨‡•§")

# ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì, ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¨‡¶æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@bot.on_message(filters.private & (filters.video | filters.document | filters.audio))
async def save_file(client, message):
    media = message.video or message.document or message.audio
    
    # media ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ
    if not media:
        return

    # ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶Æ‡ßá‡¶ü‡¶æ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    file_data = {
        "file_id": media.file_id,
        "file_unique_id": media.file_unique_id,
        "file_name": media.file_name,
        "mime_type": media.mime_type,
        "file_size": media.file_size,
        "caption": message.caption or "",
        "user_id": message.from_user.id,
        "timestamp": int(time.time())
    }

    # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶≠ ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    await collection.update_one(
        {"file_unique_id": media.file_unique_id},
        {"$set": file_data},
        upsert=True
    )

    stream_link = f"{WEB_DOMAIN}/watch/{media.file_id}"
    
    # ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶´‡¶∞‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    try:
        await client.send_cached_media(
            chat_id=LOG_CHANNEL, 
            file_id=media.file_id,
            caption=(
                f"üë§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: [{message.from_user.first_name}](tg://user?id={message.from_user.id})\n"
                f"üÜî ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: `{message.from_user.id}`\n\n"
                f"üóÇ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ: `{media.file_name}`\n"
                f"üîó ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï: {stream_link}"
            )
        )
    except Exception as e:
        print(f"‚ö†Ô∏è ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {e}")

    await message.reply_text(
        f"‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá!\n\nüîó **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:**\n{stream_link}", 
        disable_web_page_preview=True
    )

# [‡¶¨‡¶ø‡¶É‡¶¶‡ßç‡¶∞‡¶É] ‡¶è‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡ßá‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡¶æ‡¶∞ *‡¶∏‡¶Æ‡¶∏‡ßç‡¶§* ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡ßá‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡ßá‡•§
# ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶ï‡¶†‡¶ø‡¶®‡•§ ‡¶§‡¶æ‡¶á ‡¶è‡¶ü‡¶ø ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã‡•§
# @bot.on_deleted_messages()
# async def on_delete(client, messages):
#     for msg in messages:
#         # ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡¶ì‡ßü‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶®‡ßü
#         # ‡¶§‡¶æ‡¶á ‡¶è‡¶á ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ‡¶á ‡¶≠‡¶æ‡¶≤‡ßã
#         pass


# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def run_web():
    # ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Gunicorn ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã, ‡¶§‡¶¨‡ßá ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ü‡¶ø ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))

if __name__ == "__main__":
    # Flask ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    web_thread = Thread(target=run_web)
    web_thread.start()
    
    # Pyrogram ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    print("ü§ñ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    bot.run()
