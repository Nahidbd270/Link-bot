import os
import time
import asyncio
import aiohttp
from pyrogram import Client, filters
from pyrogram.errors import UserIsBlocked, PeerIdInvalid
from flask import Flask, render_template_string, abort, redirect, url_for
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
load_dotenv()

# --- Configuration ---
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME")
WEB_DOMAIN = os.getenv("WEB_DOMAIN")
MONGO_URI = os.getenv("MONGO_URI")
LOG_CHANNEL = int(os.getenv("LOG_CHANNEL"))

# --- Database Setup ---
mongo_client = AsyncIOMotorClient(MONGO_URI)
db = mongo_client["filestream"]
files_collection = db["files"]

# --- Flask App ---
app = Flask(__name__)

# --- Pyrogram Bot ---
# 'bot_token' ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶æ ‡¶¶‡¶ø‡ßü‡ßá 'Client' ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶á ‡¶≠‡¶æ‡¶≤‡ßã ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏
bot = Client(
    "FileStreamBot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# --- HTML Template ---
PLAYER_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title }}</title>
  <style>
    body { background-color: #0d1117; color: #c9d1d9; text-align: center; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif; margin: 0; padding: 20px; }
    .container { max-width: 850px; margin: auto; }
    video { width: 100%; border-radius: 12px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5); outline: none; margin-top: 20px; }
    h1 { font-size: 1.6rem; margin-top: 25px; font-weight: 600; }
    .footer { margin-top: 30px; font-size: 0.9rem; color: #8b949e; }
    a { color: #58a6ff; text-decoration: none; }
    a:hover { text-decoration: underline; }
  </style>
</head>
<body>
  <div class="container">
    <video controls autoplay playsinline>
      <source src="{{ stream_url }}" type="{{ mime_type }}">
      Your browser does not support the video tag.
    </video>
    <h1>{{ title }}</h1>
    <div class="footer">Powered by <a href="https://t.me/{{ bot_username }}" target="_blank">{{ bot_username }}</a></div>
  </div>
</body>
</html>
"""

# --- Flask Routes ---
@app.route('/')
def home():
    return "<h3>‚úÖ ‡¶´‡¶æ‡¶á‡¶≤‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶≤‡¶õ‡ßá!</h3>"

@app.route('/watch/<file_id>')
async def watch_stream(file_id):
    file_doc = await files_collection.find_one({"file_id": file_id})
    if not file_doc:
        return abort(404, "‡¶´‡¶æ‡¶á‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü ‡¶®‡¶æ, ‡¶§‡¶æ‡¶á ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
    # ‡¶§‡¶¨‡ßá ‡¶è‡¶á ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø Telegram API-‡¶è‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶• ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getFile?file_id={file_id}"
            async with session.get(url) as resp:
                if resp.status != 200:
                    return abort(502, "Telegram API ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§")
                data = await resp.json()
                if not data.get("ok"):
                    return abort(404, f"Telegram error: {data.get('description')}")
        
        file_path = data['result']['file_path']
        stream_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"

        return render_template_string(
            PLAYER_TEMPLATE,
            title=file_doc.get("file_name", "Untitled Video"),
            stream_url=stream_url,
            mime_type=file_doc.get("mime_type", "video/mp4"),
            bot_username=BOT_USERNAME
        )
    except Exception as e:
        print(f"Error in watch_stream: {e}")
        return abort(500, "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§")


# --- Pyrogram Handlers ---
@bot.on_message(filters.private & filters.command("start"))
async def start_handler(client, message):
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        file_id = args[1]
        file_doc = await files_collection.find_one({"file_id": file_id})
        if file_doc:
            try:
                await client.send_cached_media(
                    chat_id=message.chat.id,
                    file_id=file_id,
                    caption=file_doc.get("caption", "")
                )
            except Exception as e:
                await message.reply_text(f"‚ö†Ô∏è ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
        else:
            await message.reply_text("‚ùå ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶¨‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡ßà‡¶ß‡•§")
    else:
        await message.reply_text(
            f"üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n\n‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì, ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶¨‡¶æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®, "
            f"‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡ßá‡¶¨‡•§\n\n"
            f"‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® [Your Name](Your_Profile_Link)‡•§" # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ì ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶®
        )


@bot.on_message(filters.private & (filters.video | filters.document | filters.audio))
async def file_handler(client, message):
    media = message.video or message.document or message.audio
    if not media:
        return

    # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßá‡¶ü‡¶æ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    file_data = {
        "file_id": media.file_id,
        "file_unique_id": media.file_unique_id,
        "file_name": media.file_name or "Untitled",
        "mime_type": media.mime_type,
        "file_size": media.file_size,
        "caption": message.caption.html if message.caption else "",
        "user_id": message.from_user.id,
        "timestamp": int(time.time())
    }

    # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    await files_collection.update_one(
        {"file_unique_id": media.file_unique_id},
        {"$set": file_data},
        upsert=True
    )

    stream_link = f"{WEB_DOMAIN}/watch/{media.file_id}"

    # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    await message.reply_text(
        f"‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá!\n\n"
        f"üîó **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:**\n`{stream_link}`",
        disable_web_page_preview=True
    )

    # ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    try:
        log_caption = (
            f"üë§ **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ:** [{message.from_user.first_name}](tg://user?id={message.from_user.id})\n"
            f"üÜî **‡¶Ü‡¶á‡¶°‡¶ø:** `{message.from_user.id}`\n\n"
            f"üóÇÔ∏è **‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ:** `{file_data['file_name']}`\n"
            f"üîó **‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:** {stream_link}"
        )
        await client.send_message(chat_id=LOG_CHANNEL, text=log_caption)
    except Exception as e:
        print(f"‚ö†Ô∏è ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {e}")

# ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
async def run_all():
    await bot.start()
    print("ü§ñ ‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
    # Gunicorn ‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶¨‡ßá, ‡¶§‡¶æ‡¶á ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø app.run() ‡¶®‡ßá‡¶á‡•§
    # For local testing, you can add `app.run(...)` here inside an `if __name__ == "__main__"` block
    await asyncio.Event().wait() # ‡¶¨‡¶ü‡¶ï‡ßá ‡¶∏‡¶ö‡¶≤ ‡¶∞‡¶æ‡¶ñ‡ßá

# Koyeb ‡¶¨‡¶æ Heroku ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø 'app' ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶¨‡ßá
# Gunicorn ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá: gunicorn bot:app
if __name__ == '__main__':
    # ‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    # ‡¶°‡ßá‡¶™‡ßç‡¶≤‡ßü‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ
    print("‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    asyncio.run(run_all())
